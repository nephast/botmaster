<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home-rsses on Botmaster Documentation</title>
    <link>https://jdwuarin.github.io/botmaster/home/index.xml</link>
    <description>Recent content in Home-rsses on Botmaster Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MIT</copyright>
    <lastBuildDate>Sat, 29 Oct 2016 19:25:10 +0100</lastBuildDate>
    <atom:link href="https://jdwuarin.github.io/botmaster/home/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Botmaster v 2.2.2</title>
      <link>https://jdwuarin.github.io/botmaster/home/</link>
      <pubDate>Sat, 29 Oct 2016 19:25:10 +0100</pubDate>
      
      <guid>https://jdwuarin.github.io/botmaster/home/</guid>
      <description>

&lt;h2 id=&#34;what-is-botmaster&#34;&gt;What is botmaster?&lt;/h2&gt;

&lt;p&gt;Botmaster is a lightweight highly extendable, highly configurable chatbot framework. It was meant to be used both in small scale and large scale projects. Its purpose is to integrate your chatbot into a variety of messaging channels - currently Facebook Messenger, Slack, Twitter DM, Telegram and socket.io. Using botmaster looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Botmaster = require(&#39;botmaster&#39;);
const config = require(./config);
const botsSettings = [{ telegram: config.telegramSettings },
                      { messenger: config.messengerSettings },
                      { twitter: config.twitterSettings },
                      { slack: config.slackSettings }];

const botmasterSettings = { botsSettings };

const botmaster = new Botmaster(botmasterSettings);

botmaster.on(&#39;update&#39;, (bot, update) =&amp;gt; {
  bot.reply(update, &#39;Right back at you!&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;botmaster-is-platform-agnostic&#34;&gt;Botmaster is platform agnostic&lt;/h2&gt;

&lt;p&gt;Botmaster is platform agnostic in two important ways. Firstly, out of the box, developers can have bots running on Facebook Messenger, Slack, Twitter DM, Telegram and their personal webapp/app via socket.io with not only a standardized text message format, but also a standardized attachment format. Secondly, BotMaster makes no assumptions about the back-end bot itself - you can write code that allows BotMaster to call conversational engines such as IBM Watson&amp;rsquo;s conversation API, open source frameworks or even write the conversation engine yourself.&lt;/p&gt;

&lt;h2 id=&#34;botmaster-s-philosophy&#34;&gt;Botmaster&amp;rsquo;s Philosophy&lt;/h2&gt;

&lt;p&gt;Its philosophy is to minimise the amount of code developers have to write in order to create 1-on-1 conversational chatbots that work on multiple platforms. It does so by defining a standard with respect to what format messages take and how 1-on-1 conversations occur. Messages to/from the various messaging channels supported are all mapped onto this botmaster standard, meaning the code you write is much reduced when compared to a set of point:point integrations.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>