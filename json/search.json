[
    {
        "uri": "/content/changelog/CHANGELOG",
        "title": "CHANGELOG",
        "content": "\nPATCH: 2.2.2\n\nThis patch allows users to set the userId from a sender when using the bot socket.io class. socket now needs to be opened with something like this on the client side:\n\nvar socket = io('?botmasterUserId=wantedUserId');\n\nSee updated Botmaster Socket.io bot mini-tutorial here\n\n MINOR: Botmaster 2.2.0\n\nThis minor release allows developers to create news instances of Botmaster without bots settings by writing something like:\n\nconst Botmaster = require('botmaster');\nconst MessengerBot = Botmaster.botTypes.MessengerBot;\n.\n.\nconst botmaster = new Botmaster();\n.\n. // full settings objects omitted for brevity\n.\nconst messengerBot = new MessengerBot(messengerSettings);\nconst slackBot = new SlackBot(slackSettings);\nconst twitterBot = new TwitterBot(twitterSettings);\nconst socketioBot = new SocketioBot(socketioSettings);\nconst telegramBot = new TelegramBot(telegramSettings);\n\nbotmaster.addBot(messengerBot);\nbotmaster.addBot(slackBot);\nbotmaster.addBot(twitterBot);\nbotmaster.addBot(socketioBot);\nbotmaster.addBot(telegramBot);\n\nThis is because it might be viewed as cleaner by some to add bots in the following way rather than doing this in the constructor.\n\nPATCH: Botmaster 2.1.1\n\nThis patch fixes a bug whereby one couldn't instantiate a botmaster object that would use socket.io in all reasonably expected ways. See here for a discussion.\n\n MINOR: Botmaster 2.1.0\n\nThis version adds support for socket.io bots within the botmaster core. This is the last\nbot class that will be in the core\n\nMAJOR: Botmaster 2.0.0\n\nIn this new version, a lot of new things were added to Botmaster. A few others were removed.\n\n Breaking Changes\nIf you were using SessionStore in version 1.x.x, you won't be able to anymore in version 2.x.x. They have been scratched for the far more common middleware design pattern common in so many other frameworks (e.g. express). Middleware can be hooked into right before receiving an update and right before sending out a message. It fits ideally with people wanting to setup session storage at these points.\n\nAdding Slack\nSupport for Slack as the fourth channel supported by Botmaster has been added. Using the Events API, you can now send and receive messages on the platform.\n\n get User info\nIf the platform supports it and the bot class you are using supports it too, you can now use the bot.getUserInfo method to retrieve basic information on a user, including their name and profile pic.\n\nbug fixes\nAs with any release, a bunch of bugfixes were done.\n",
        "tags": []
    },
    {
        "uri": "/content/getting-started/getting-set-up",
        "title": "Getting set up",
        "content": "\nIn order to instantiate a Botmaster object, you need to pass it some settings in the form of an object. These settings look like this.\n\nconst botmasterSettings = {\n  botsSettings: botsSettings, // see below for a definition of botsSettings\n  app: app, // optional, an express app object if you are running your own server\n  server: server, // optional, an http server object (used if using socket.io)\n  port: port, // optional, only used if \"app\" is not defined. Defaults t0 3000 in that case\n  sessionStore: sessionStore // optional. Define if you will be dealing with sessions\n}\nSee Working with Botmaster for a more formal definition\n\nbotsSettings look something like this:\n\nconst botsSettings = [{ messenger: messengerSettings },\n                      { twitter: twitterSettings },\n                      { twitter: otherTwitterSettings }];\n\nI.e. it is an array of single key objects. Where you specify the type as the key of each object and the settings as the value. Here I show that you can define multiple bots of the same type at once (twitter ones in this example). As you surely guessed, each different platform will expect different credentials. So platform specific settings will differ.\n\nOnce you have those botmasterSettings, you can go on and instantiate a Botmaster object. This looks something like this:\n\nconst botmaster = new Botmaster(botmasterSettings);\n\nNow, I know what you're thinking: \"but how do I get these messengerSettings and twitterSettings or other ones?\" Well, I cover all of those in the following pages.\n",
        "tags": []
    },
    {
        "uri": "/content/getting-started/index",
        "title": "Getting started",
        "content": "\nGETTING STARTED\n\n Installation\nQuickstart\n Getting set up\nFacebook Messenger Setup\n Slack Setup\nSocket.io Setup\n Twitter Setup\nTelegram setup\n Webhooks\n",
        "tags": []
    },
    {
        "uri": "/content/getting-started/installation",
        "title": "Installation",
        "content": "\nMake sure you have Node.js and npm installed on your machine. If you don't, I recommend using nvm to manage your node versions. Find out more about it here\n\nOnce you have node, create a new project directory and go into it:\n\nmkdir mybotmasterproject && cd mybotmasterproject\n\nMake sure you initialize a node project in the new directory and going through the prompt by doing:\n\nnpm init\n\nFinally, install the botmaster npm package.\n\nnpm install --save botmaster\n\nThat should do!\n",
        "tags": []
    },
    {
        "uri": "/content/getting-started/messenger-setup",
        "title": "Facebook Messenger Setup",
        "content": "\nCode\n\nconst Botmaster = require('botmaster');\n\nconst messengerSettings = {\n  credentials: {\n    verifyToken: 'YOUR verifyToken',\n    pageToken: 'YOUR pageToken',\n    fbAppSecret: 'YOUR fbAppSecret',\n  },\n  webhookEndpoint: '/webhook1234',\n};\n\nconst botsSettings = [{ messenger: messengerSettings }];\n\nconst botmaster = new Botmaster({ botsSettings });\n\nbotmaster.on('update', (bot, update) = {\n  bot.reply(update, 'Right back at you');\n});\n\n Getting your Credentials\n\nIf you don't already have these, follow the steps 1-4 on the Facebook Messenger guide:\nhttps://developers.facebook.com/docs/messenger-platform/guides/quick-start\n\nIn step 2, where you setup your webhook, no need to code anything. Just specify the webhook, enter any secure string you want as a verify token(verifyToken) and copy that value in the settings object. Also, click on whichever message [those are \"update\"s using botmaster semantics] type you want to receive from Messenger (messagedeliveries, messages, messagepostbacks etc...).\n\nTo find your Facebook App Secret (fbAppSecret), navigate to your apps dashboard and under App Secret click show, enter your password if prompted and then there it is.\n\nWebhooks\n\n{{% notice note %}}\nIf you are not too sure how webhooks work and/or how to get them to run locally, go to webhooks to read some more.\n{{% /notice %}}\n",
        "tags": []
    },
    {
        "uri": "/content/getting-started/quickstart",
        "title": "Quickstart",
        "content": "\nIf you already know your credentials for the platforms you want to be supporting in your project the following code will help you get started\n\n// settings stuff\nconst Botmaster = require('botmaster');\n\nconst messengerSettings = {\n  credentials: {\n    verifyToken: 'YOUR verifyToken',\n    pageToken: 'YOUR pageToken',\n    fbAppSecret: 'YOUR fbAppSecret',\n  },\n  webhookEndpoint: '/webhook1234', // botmaster will mount this webhook on https://YourDomainName/messenger/webhook1234\n};\n\nconst twitterSettings = {\n  credentials: {\n    consumerKey: 'YOUR consumerKey',\n    consumerSecret: 'YOUR consumerSecret',\n    accessToken: 'YOUR accessToken',\n    accessTokenSecret: 'YOUR accessTokenSecret',\n  }\n}\n\nconst telegramSettings = {\n  credentials: {\n    authToken: 'YOUR authToken',\n  },\n  webhookEndpoint: '/webhook1234/',\n};\n\nconst slackSettings = {\n  credentials: {\n    clientId: 'YOUR app client ID',\n    clientSecret: 'YOUR app client secret',\n    verificationToken: 'YOUR app verification Token',\n    landingPageURL: 'YOUR landing page URL' // users will be redirected there after adding your bot app to slack. If not set, they will be redirected to their standard slack chats.\n  },\n  webhookEndpoint: '/webhook',\n  storeTeamInfoInFile: true,\n};\n\nconst socketioSettings = {\n  id: 'SOMEIDOFYOURCHOOSING',\n};\n\nconst botsSettings = [{ telegram: telegramSettings },\n                      { messenger: messengerSettings },\n                      { twitter: twitterSettings },\n                      { slack: slackSettings },\n                      { socketio: socketioSettings }];\n\nconst botmasterSettings = {\n  botsSettings: botsSettings,\n  // by default botmaster will start an express server that listens on port 3000\n  // you can pass in a port argument here to change this default setting:\n  port: 3001,\n}\n\nconst botmaster = new Botmaster(botmasterSettings);\n\n// actual code\nbotmaster.on('update', (bot, update) = {\n  bot.sendTextMessageTo('Right back at you!', update.sender.id);\n});\n\nbotmaster.on('error', (bot, err) = {\n  console.log(err.stack);\n  console.log('there was an error');\n});\n",
        "tags": []
    },
    {
        "uri": "/content/getting-started/slack-setup",
        "title": "Slack Setup",
        "content": "\nCode\n\nconst Botmaster = require('botmaster');\n\nconst slackSettings = {\n  credentials: {\n    clientId: 'YOUR app client ID',\n    clientSecret: 'YOUR app client secret',\n    verificationToken: 'YOUR app verification Token'\n  },\n  webhookEndpoint: '/webhookd24sr34se',\n  storeTeamInfoInFile: true,\n};\n\nconst botsSettings = [{ slack: slackSettings }];\n\nconst botmaster = new Botmaster({ botsSettings });\n\nbotmaster.on('update', (bot, update) = {\n  bot.reply(update, 'Right back at you');\n});\n The Botmaster Slack bot\n\nBecause Slack works slightly differently from the other platforms covered in the core Botmaster package, I will briefly explain here what your botmaster Slack bot will be exactly.\n\nAs you surely know, Slack is a product that enables team members to communicate easily with one another. because of that, one team member can't just \"add\" a bot for herself in the same way one would in Facebook Messenger or Telegram or other.\n\nTeams can either build a bot that will only live within their own slack team. Or they can package a bot in a Slack app that \"packages\" the bot.\nAdmin team members can add support for a bot (by installing an App that packages said bot) and then team members can start communicating with it as they would with another team member. At this point, they would be communicating with what is known as, in Slack semantics, a bot user.\n\nThe slackSettings object is required to allow us to communicate to end users via this bot user that needs to be set up on Slack's end.\n\nBotmaster Slack bot mini-tutorial\n\nFollowing these steps, you will have a fully functional Slack bot using botmaster that can then be edited as wanted. This mini-tutorial uses localtunnel to expose one of your ports to the world. see why you might want to use this and how to install and setup localtunnel herefor your local botmaster project. You can use ngrok or any other service you know or find suitable and achieve the same result.\n\n Create an app\n\nNavigate to: https://api.slack.com/apps and make sure you are signed in. If you aren't you will be redirected to your team's slack once logged in and will need to go back to the mentioned link.\n\nClick the create new App button and enter any App Name you want. This won't be the name of the bot user. However, the name should ideally be related to your bot user so as not to confuse your users. For instance, if your bot user will be called my_super_bot, calling the app something like My Super Bot App would make sense.\n\nGet your first credentials\n\nOn this page you were redirected to, you will find an App credentials section. Both your Client ID (clientId in Botmaster) and your Client Secret (clientSecret in Botmaster) are here. Take note of them.\n\n Setup Your App's OAuth Webhook\n\nYou don't need to know anything about OAuth to complete this step. Just know that this URL will be called when people are installing/authorizing your app.\n\nIn the left panel, click on the OAuth & Permissions tab and enter your webhook in the Redirect URL(s) field as shown here:\n    \nThis URL has to be of the form: https://\\your_base_url\\/slack/\\webhookEndpoint\\. For example, if I am using localtunnel to test the bot locally, and started localtunnel by running the following:\n   lt -p 3000 -s botmastersubdomain\n I would set my Redirect URL(s) to: https://botmastersubdomain.localtunnel.me/slack/webhookd24sr34se (based on the webhookEnpoint set in my slackSettings at the top of this page). Click on Save Changes.\n\nAdd a Bot User\n\nGo to Bot Users and click on the Add a Bot User button. Select a name for your bot (e.g. mysuperbot) and click the Add Bot User button.\n\n Get the rest of your credentials\n\nNavigate to the Event Subscriptions tab and click on the toggle button in the to right corner to on. Then in the Request URL field that pops up, enter the same URL as in step 4. You will get an error. This is normal and is due to two reasons. Firstly, we don't actually have an app started and listening at the mentioned URL and secondly because even if we did, we don't have our App's verification Token. Let's fix this!\n\nNavigate back to Basic Information and note that you now have a Verification Token in the App Credentials box. Take note of it.\n\nStart your Botmaster App Locally\n\nStart your botmaster app in any project folder you might want (see here if you haven't installed botmaster yet). To start the botmaster project, you'll want to create an app.js file with the contents from the code at the top of this page in the root of your project folder. Replace the credentials with the ones you have gathered. Run node app.js to start the app. Let's now expose out bot to the world.\n\nFor the webhook to work locally, you'll now need to make sure you've started localtunnel. If you are doing all of that from a server that already has a Domain Name, you won't need to do this. But I am assuming most people are doing this from their local computer. so in the command line, run something like this:\nlt -p 3000 -s wantedbaseurlforyour_bot\n\n Setup Your App's Events and Events Webhook\n\nGo back to the Event subscription page and enter your webhook url again. This should now work and look something like this:  Scroll down and click on Add Bot User Events. At the minimum, add the following events:\n    message.ipm\n    message.channels\n    message.im\n    message.groups\nClick Save Changes\n\nInstall your Slack App\n\nWe're almost done here. We need a way to install our app to test it out. This is done via what is called a Slack button. because botmaster manages all the nitty-gritty parts of this process, all you need to do is create a views folder in your project folder and create an index.html file in this views folder with the following contents\na href=\"https://slack.com/oauth/authorize?scope=bot&clientid=YOURAPPCLIENTID\"\n  <img alt=\"Add to Slack\" height=\"40\" width=\"139\"\n  src=\"https://platform.slack-edge.com/img/addtoslack.png\"\n  srcset=\"https://platform.slack-edge.com/img/addtoslack.png 1x,\n          https://platform.slack-edge.com/img/addtoslack@2x.png 2x\" /\n/a\nNote that you'll need to replace YOUR_APP_CLIENT_ID in the href with your own. You definitely don't want to put in your client secret here!\n\n Try out your bot!\n\nAssuming your botmaster app and localtunnel are still running, open your index.html file (not in a text editor, but actually in a browser) by double clicking on it. Authorize your newly created app to add it to your team. You should now be redirected to your teams slack and be able to chat to your bot.\n\nMake your Bot Available to the World\n\nYou might actually want to allow others to install your app by using the Slack Button. However, to do so you will need to host it somewhere. We'll take advantage of the fact that botmaster uses express.js under the hood and edit our app.js file to look like this:\n\nconst Botmaster = require('botmaster');\nconst express = require('express'); // added\n.\n.\n.\nconst botmaster = new Botmaster({ botsSettings });\nbotmaster.app.use(express.static(__dirname + '/views')); //added\n// or if you don't want it at the root of your app, add this:\nbotmaster.app.use('/slack', express.static(__dirname + '/views')); // added\n\nbotmaster.on('update', (bot, update) = {\n  bot.reply(update, 'Right back at you');\n});\n\nMake sure to add either one of the botmaster.app.use... lines.\nIf you pick the first one, navigate to your URL (https://botmastersubdomain.localtunnel.me/ for this example) and you will see the button.\nIf your pick the second one, navigate to your sub URL (https://botmastersubdomain.localtunnel.me/slack for this example) to see the Slack button.\n\n Webhooks\n\nNow as with any other platform using Webhooks, you'll need to update these to your production Domain Name once you deploy your code to production. And in a more general sense, if you are still unsure how webhooks work within the botmaster framework, go here\n",
        "tags": []
    },
    {
        "uri": "/content/getting-started/socketio-setup",
        "title": "Socket.io Setup",
        "content": "\nCode\n\n Server\nconst Botmaster = require('botmaster');\n\nconst socketioSettings = {\n  id: 'SOMEBOTIDOFYOUR_CHOOSING',\n};\n\nconst botsSettings = [{ socketio: socketioSettings }];\n\nconst botmaster = new Botmaster({ botsSettings });\n\nbotmaster.on('update', (bot, update) = {\n  bot.reply(update, 'Right back at you');\n});\n\nClient\nconst io = require('socket.io-client');\n\nconst socket = io(\"ws://localhost:4000\");\n\nsocket.on('connect', function() {\n  const message = {\n    text: 'Hey there botmaster!'\n  };\n\n  socket.send(JSON.stringify(message));\n});\n\n The Botmaster Socket.io bot\n\nSocket.io is a great library that allows developers to write apps using webSockets (with fallbacks to http long-polling and others when webSockets aren't available in the client). You can read more about it on their own website here: http://socket.io.\n\nBecause you might want to have a bot that not only works on some platform but also on your own webapp/app, support for socket.io was added to the Botmaster core. Although Socket.io enables developers to use their technology in a bunch of different applications, the fact that you want to use it in Botmaster means that you want to handle 1-1 conversations between users and your bot (managed by botmaster).\n\nIf you've never used both botmaster and socket.io, It's probably still pretty unclear how all of this fits in together. Hopefully the next section will help you understand and get started with this.\n\nBotmaster Socket.io bot mini-tutorial\n\nBy following these steps, you will have a fully functional Socket.io bot using botmaster. The client will live in a tiny web-page. The point of this tutorial is to get you started so that you can develop it further in any way you wish. This is completely based on the socket.io web \"get started\" guide found here: http://socket.io/get-started/chat/.\n\n Server\n\nAfter making sure that we have a project folder with a node.js project initialised and the botmaster package in it as per the installation guide.\nWe want to make sure botmaster is setup and make sure that messages coming from a websocket connection are received. So in our poject folder, in our app.js file, we simply copy the code found at the top of this page:\n\nconst Botmaster = require('botmaster');\n\nconst socketioSettings = {\n  id: 'SOMEIDOFYOURCHOOSING',\n};\n\nconst botsSettings = [{ socketio: socketioSettings }];\n\nconst botmaster = new Botmaster({ botsSettings });\n\nbotmaster.on('update', (bot, update) = {\n  bot.reply(update, 'Right back at you');\n});\n\nWe will need to add a couple of lines to this code because we will be serving a webpage from our server. Not just listening on for botmaster messages. To do so, we take advantage of the fact that botmaster is built on top of express and that. We also assume that we will be serving our static assets (the components of our webpage) from a folder called 'public' within our project directory. Our updated code looks like this:\n\nconst Botmaster = require('botmaster');\nconst express = require('express'); //added\n\nconst socketioSettings = {\n  id: 'SOMEIDOFYOURCHOOSING',\n};\n\nconst botsSettings = [{ socketio: socketioSettings }];\n\nconst botmaster = new Botmaster({ botsSettings });\nbotmaster.app.use(express.static(__dirname + '/public')); //added\n\nbotmaster.on('update', (bot, update) = {\n  bot.reply(update, 'Right back at you');\n});\n\nbotmaster.on('error', (bot, err) = {\n  console.log(err);\n});\n\nWe also added the botmaster 'error' event listener, because that's just always good to do.\n\nClient side\n\nAs mentioned in the Server side, we will create a folder named 'public' within our poject dir. In it, we will have the following three files:\n\nindex.html\nstyle.css\nclient_app.js\n\nSo that your final tree structure looks like this:\n\nyourprojectfolder\n├── app.js\n└── public\n    ├── client_app.js\n    ├── index.html\n    └── style.css\n\nIn the index.html file, we will put some very basic html that looks like this:\n\n!doctype html\nhtml\n  head\n    titleBotmaster bot/title\n    link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"\n  /head\n  body\n    div class=\"chat\"\n      ul id=\"messages\"/ul\n      form id=\"form\" action=\"\"\n        input type=\"text\" id=\"text-input\" autocomplete=\"off\" /buttonSend/button\n      /form\n    /div\n\n    script src=\"/socket.io/socket.io.js\"/script\n    script src=\"client_app.js\"/script\n  /body\n/html\n\nThe important line here is the line where we are importing socket.io. This works because socket.io adds a path to our server (in this case, a server created by botmaster under the hood) to serve this exact endpoint.\nThe other imports are simply the ones we will be creating.\n\nIn the style.css file, simply add the following:\n\n{\n  margin: 0;\n  padding: 0;\n  box-sizing:\n  border-box;\n}\n\nbody {\n  font: 13px Helvetica, Arial;\n}\n\nform {\n  background: 000;\n  padding: 3px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n}\n\nform input {\n  border: 0;\n  padding: 10px;\n  width: 90%;\n  margin-right: .5%;\n}\n\nform button {\n  width: 9%; background: rgb(130, 224, 255);\n  border: none; padding: 10px;\n}\n\nmessages {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\nmessages li {\n  padding: 5px 10px;\n}\n\nmessages .botmaster-message {\n  background: eee;\n}\nThis is the exact look from the socket.io tutorial mentioned above (and mostly their code too).\n\nFinally, in the client_app.js file, you should include the following:\n\n// the following line could also be: \"var socket = io('ws://URL:PORT_Number?botmasterUserId=wantedUserId');\"\n// if you know you will be communicating with a server different from the one that served you the page you are on\n// do something like this: io('ws://URL:PORT_Number');\n// this only works because the socket.io library assumes with this syntax that the socket.io server\n// lives at the same address as the server that served this page (this should mostly be your case)\nvar socket = io('?botmasterUserId=wantedUserId');\n\n// just get the html elements we will be needing by ID\nvar form = document.getElementById('form');\nvar textInput = document.getElementById('text-input');\nvar messages = document.getElementById('messages');\n\nform.onsubmit = function(event) {\n  // just making sure the page isn't refreshed\n  event.preventDefault();\n  // don't do anything if there is no text\n  if (!textInput.value) {\n    return;\n  }\n  // Add the user message to the web page\n  messages.insertAdjacentHTML('beforeend',\n    li class=\"user-message\"${textInput.value}/li);\n  // create a botmaster compatible message from the text input by user\n  const message = {\n    text: textInput.value,\n  };\n  // just send a stringified version of it over the webSocket\n  socket.send(JSON.stringify(message));\n  // finally, clear the user textInput field\n  textInput.value = '';\n};\n\nsocket.on('message', function(botmasterMessage){\n  var messageObject = JSON.parse(botmasterMessage);\n  var textMessage = messageObject.message.text;\n\n  messages.insertAdjacentHTML('beforeend',\n    li class=\"botmaster-message\"${textMessage}/li);\n});\n\nYou should have a read through this code to make sure you understand it as that is the code communicating with our botmaster backend.\n\nOn the first line, we call: var socket = io('?botmasterUserId=wantedUserId');. This effectively opens up a socket connection with our backend by making a request to something like this: io('ws://localhost:3000?botmasterUserId=wantedUserId');. Here as you can see, we are setting a query param called botmasterUserId to 'wantedUserId'. This is done because we want to make sure that when we are getting updates in our backend, the update.sender.id part will be what we set it to here and not anything else (by default the randomly allocated socket.id value). This is even more important when your users can connect from different clients and you want to make sure the botmaster reply is propagated to all the clients.\n\nIn the form.onsubmit part, we make sure that the text contained in the input cell is correctly formatted then sent to botmaster via the websocket. We also make sure to display it in our page and to then clear the input.\n\nIn the socket.on('message') part, we simply display the received message.\n\nNow that our code is here, simply go to your command line and run node app.js. If you now open a browser to 127.0.0.1:3000 you should be able to chat with your pretty useless (for now) bot. Just like this:\n\nSecurity\n\nYou might be wondering how you can secure your Botmaster socket.io app. I.e. how can you make sure that a client connecting with a certain id really is who they claim they are. Well, this part is actually left to you, the developer to do. I didn't want to make any assumptions with regards to what people would want to use to secure their app. So what I do is expose the socket.io server object through the bot object. It can be accessed in the following way\n\nsocketioBot.ioServer\n\nThen you'll be able to register a middleware function to your socker.io server as such:\n\nsocketioBot.ioServer.use((socket, next) = {\n  if (socket.request.headers.cookie) return next();\n  next(new Error('Authentication error'));\n});\n\nThis is shamelessly stolen from the socket.io documentation here: http://socket.io/docs/server-api/namespace#use(fn:function):namespace\n\nThis function will be executed every time there is an incoming socket connection. Indeed, no need to do so on every message as once the connection is made, all transfers are secured on the open socket. That's really the whole point of webSockets. \n",
        "tags": []
    },
    {
        "uri": "/content/getting-started/telegram-setup",
        "title": "Telegram Setup",
        "content": "\nCode\n\nconst Botmaster = require('botmaster');\n\nconst telegramSettings = {\n  credentials: {\n    authToken: 'YOUR authToken',\n  },\n  webhookEndpoint: '/webhook1234/',\n};\n\nconst botsSettings = [{ telegram: telegramSettings }];\n\nconst botmaster = new Botmaster({ botsSettings });\n\nbotmaster.on('update', (bot, update) = {\n  bot.reply(update, 'Right back at you');\n});\n\n Credentials\n\nAll you need here is an authToken. In order to get one, you will need to either create a new bot on telegram.\n\nBasically, you'll need to send a /newbot command(message) to Botfather (go talk to him here). Once you're done with giving it a name and a username, BotFather will come back to you with your authToken. Make sure to store it somewhere. More info on BotFather can be found here if needed.\n\nFor more on Telegram, you can find the telegram api docs here\n\nWebhooks\n\nSetting up your webhook requires you to make the following request outside of Botmaster (using curl for instance or a browser):\n\nhttps://api.telegram.org/botauthToken/setWebhook?url='Your Base URL'/telegram/webhook1234\n\n{{% notice warning %}}\nBecause Telegram doesn't send any type of information to verify the identity of the origin of the update, it is highly recommended that you include a sort of hash in your webhookEndpoint. I.e., rather than having this: webhookEndpoint: '/webhook/', do something more like this: webhookEndpoint: '/webhook92ywrnc9qm4qoiuthecvasdf42FG/'. This will assure that you know where the request is coming from.\n{{% /notice %}}\n\n{{% notice note %}}\nIf you are not too sure how webhooks work and/or how to get them to run locally, go to webhooks to read some more.\n{{% /notice %}}\n",
        "tags": []
    },
    {
        "uri": "/content/getting-started/twitter-setup",
        "title": "Twitter Setup",
        "content": "\n\nconst Botmaster = require('botmaster');\n\nconst twitterSettings = {\n  credentials: {\n    consumerKey: 'YOUR consumerKey',\n    consumerSecret: 'YOUR consumerSecret',\n    accessToken: 'YOUR accessToken',\n    accessTokenSecret: 'YOUR accessTokenSecret',\n  }\n}\n\nconst botsSettings = [{ twitter: twitterSettings }];\n\nconst botmaster = new Botmaster({ botsSettings });\n\nbotmaster.on('update', (bot, update) = {\n  bot.reply(update, 'Right back at you');\n});\n\nGetting your Credentials\n\nTwitter's setup is slightly more tricky than one would wish. Because Twitter requires you to create an actual account and not a page or a bot, you'll have to do a few more steps.\n\n Setting up the bot account\n\nJust create a standard twitter account as you would any other. Name it as you want.\nnavigate to your security and privacy settings (click on your image profile  settings  privacy and security settings)\nscroll to the bottom of the page and make sure \"Receive Direct Messages from anyone\" is ticked. (currently this has to be done because of Twitter's rules concerning DMs, where in order to send a DM to someone, they have to be following you).\n\nSetting up the app\n\nNavigate to the somewhat hard to find Twitter developer app dashboard at: https://apps.twitter.com/\nClick Create New App. Enter your details (callback URL is not required if you are starting from scratch here). 'Website' can take in a placeholder like (http://www.example.com)\nNow navigate straight to the 'Permissions' tab(do this before going to the 'Keys and Access Tokens' tab). Select 'Read, Write and Access direct messages' and then click 'Update Setting'\nNavigate to the 'Keys and Access Tokens' tab. You'll find your consumerKey and consumerSecret right here\nScroll down and click on 'Create my access token'. You now have your accessToken  and your accessTokenSecret\n\n! Makes sure not to create your access token before having reset your permissions. If you do that, you will need to change your permissions then regenerate your access token.\n\nThat should about do it. Because twitter DM is not completely separate from the rest of Twitter, it behaves quite differently from the other platforms on many aspects. These points are covered in working with botmaster.\n",
        "tags": []
    },
    {
        "uri": "/content/getting-started/webhooks",
        "title": "Webhooks",
        "content": "Most platforms rely on webhooks to work. As such, you are expected to setup webhooks on the various platforms that use them in order to use Botmaster with these platforms. In the 'Getting started' part of this documentation, we briefly touched onto that for Telegram and Messenger and more deeply for Slack.\n\nIf you are still unsure what webhooks are and how they work, within the context of chatbots, they are simply a URL provided by you pointing to where you expect messages and other updates to come in.\n\nAny platform that requires webhooks won't work without a webhookEndpoint parameter in their settings. E.g. for Telegram:\n\nconst telegramSettings = {\n  credentials: {\n    authToken: 'YOUR authToken',\n  },\n  webhookEndpoint: '/webhook1234/',\n};\n\nThis will mount your telegram webhook on: https://YourDomainName/messenger/webhook1234. And yes, you will need ssl in order to work with most platforms.\n\nAs an added layer of security, it is highly recommended that you include a sort of a code in your webhookEndpoint. I.e., rather that having this: webhookEndpoint: '/webhook/', do something more like this: webhookEndpoint: '/webhook92ywrnc9qm4qoiuthecvasdf42FG/'. This will assure that you know where the request is coming from. It is more important on Telegram than on other platforms as Telegram doesn't give us any way to verify the source of the message.\n\nNow we realize you will want to develop and test your code without always deploying to a server with a valid url that supports ssl.\n\nOn a local machine:\n\nWe recommend using the great localtunnel tool that proxies one of your ports to their url (with a potential wanted subdomain) using ssh.\n\nSimply install localtunnel on local machine:\n\nnpm install -g localtunnel\n\nThen run the localtunnel with a predetermined subdomain. e.g:\n\nlt -p 3000 -s botmastersubdomain //for example\n\n-p is the port and -s is the subdomain we want.\n-l is for the localhost we want to point to. This is useful is you are using botmaster inside of a container. For instance if using docker-machine, simply -l to your docker-machines ip and -p to the port that your container exposes.\n\nIn the example above, url will be: http://botmastersubdomain.localtunnel.me. Localtunnel is great and supports both ssl and non ssl request, which means we will actually wan to use: https://botmastersubdomain.localtunnel.me\n\nSo if you specified your messenger's bot webhook endpoint to, say, /webhook1234/, you will have to set up the webhook for your demo app at:\n\nhttps://botmastersubdomain.localtunnel.me/messenger/webhook1234/\n\nFor Telegram, it would look something like this:\n\nhttps://botmastersubdomain.localtunnel.me/telegram/webhook1234/\n\nIf you keep on getting an error that looks like this:\n\nyour url is: https://customname.localtunnel.me\n/usr/local/lib/node_modules/localtunnel/bin/client:58\n        throw err;\n        ^\n\nError: connection refused: localtunnel.me:44404 (check your firewall settings)\n    at Socket.anonymous (/usr/local/lib/node_modules/localtunnel/lib/TunnelCluster.js:47:32)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at emitErrorNT (net.js:1272:8)\n    at combinedTickCallback (internal/process/nexttick.js:74:11)\n    at process.tickCallback (internal/process/nexttick.js:98:9)\n\nThis is due to a bug in localtunnel. You can either go try out ngrok (which you will have to pay for), or try this workaround in the terminal:\n\n(while true; do\n  lt -p 3000 -s botmastersubdomain\ndone)\n\nor:\n\n( while true; do lt -p 3000 -s botmastersubdomain; done; )\n\nIf you prefer a one liner.\n\nThis will just restart the process whenever it crashes (which can happen very often...), making sure your webhook will always be up and listening for incoming requests.\n\nWhat I do in my projects is the following:\n\nInstall localtunnel in the project and save to dev-dependencies\nnpm install --save-dev localtunnel\n\nThen in my package.json, add something like this in my 'scripts':\n\n\"scripts\": {\n  .\n  .\n  \"tunnel\": \"( while true; do lt -p 3000 -s botmastersubdomain; done; )\",\n  .\n  .\n},\n\nI can then simply run the runnel as follows (most likely in another console tab):\n\nnpm run tunnel\n",
        "tags": []
    },
    {
        "uri": "/content/home/index",
        "title": "Botmaster v 2.2.2",
        "content": "\nWhat is botmaster?\n\nBotmaster is a lightweight highly extendable, highly configurable chatbot framework. It was meant to be used both in small scale and large scale projects. Its purpose is to integrate your chatbot into a variety of messaging channels - currently Facebook Messenger, Slack, Twitter DM, Telegram and socket.io. Using botmaster looks something like this:\n\nconst Botmaster = require('botmaster');\nconst config = require(./config);\nconst botsSettings = [{ telegram: config.telegramSettings },\n                      { messenger: config.messengerSettings },\n                      { twitter: config.twitterSettings },\n                      { slack: config.slackSettings }];\n\nconst botmasterSettings = { botsSettings };\n\nconst botmaster = new Botmaster(botmasterSettings);\n\nbotmaster.on('update', (bot, update) = {\n  bot.reply(update, 'Right back at you!');\n});\n\n Botmaster is platform agnostic\n\nBotmaster is platform agnostic in two important ways. Firstly, out of the box, developers can have bots running on Facebook Messenger, Slack, Twitter DM, Telegram and their personal webapp/app via socket.io with not only a standardized text message format, but also a standardized attachment format. Secondly, BotMaster makes no assumptions about the back-end bot itself - you can write code that allows BotMaster to call conversational engines such as IBM Watson's conversation API, open source frameworks or even write the conversation engine yourself.\n\nBotmaster's Philosophy\n\nIts philosophy is to minimise the amount of code developers have to write in order to create 1-on-1 conversational chatbots that work on multiple platforms. It does so by defining a standard with respect to what format messages take and how 1-on-1 conversations occur. Messages to/from the various messaging channels supported are all mapped onto this botmaster standard, meaning the code you write is much reduced when compared to a set of point:point integrations.\n",
        "tags": []
    },
    {
        "uri": "/content/other-articles/botmaster-or-botkit",
        "title": "Botmaster or Botkit?",
        "content": "\ntl;dr\n\nUse Botmaster If you want to build platform agnostic conversational bots using a system like Watson Conversation [or your own system] to manage 1 on 1 conversations (On Messenger, Slack, Twitter, Telegram, socket.io or more). e.g. a personal assistant, customer support etc.\n\nUse Botkit if you want to build platform dependant bots on either Slack or Twilio while managing simple conversations based on regex or also more complex ones using again Watson Conversation or wit etc. You can now also use Microsoft Bot Framework with Botkit. Although I'm not too sure why one would want to use  wouldn't just use MS Bot Framework without Botkit.\n\n Main article\nAlthough it might seem at first glance like the two frameworks (and other similar ones out there) were created with the same goal in mind, things are quite far from that. Let's have a look at how one of these frameworks compare, namely Botkit.\n\nBotkit was initially created to allow developers to easily build bots of all types that would be available on Slack. Although it now allows developers to build bots for twilio IP messaging and Facebook Messenger too. It was first published in December 2015\n\nBotmaster, on the other hand, is a lightweight framework created after answering the following question: How can I minimise the amount of code a developer has to write in order to create a 1-on-1 conversational chatbot that works on multiple different platforms. It was first published to Github on August 2016.\n\nDue to the differences in application intents between both frameworks, the design differs in many ways.\n\nMessage format\n---\n\nBotkit's messages are only standardized to some extent. Because Botkit it not opinionated, it doesn't make any assumption on what a message attachments or message quick_replies should look like and what they would map to on different platform.\n\nThis means that a Facebook messenger message with an image attachments will look something like this:\n\n{\n  user: idofsender,\n  channel: idofsender, // also\n  timestamp: unix miliseconds timestamp,\n  seq: messagesequenceid,\n  mid: message_id,\n  attachments: [\n    {\n      type: 'image',\n      payload: {\n        url: 'https://scontent.xx.fbcdn.net/v/.....'\n      }\n    }\n  ]\n}\n\nWhile a Twilio IPM message (Twilio IPM only supports text) will look like this:\n\n{ ChannelSid: some_id,\n  EventType: 'onMessageSent',\n  InstanceSid: some_id,\n  Attributes: '{}',\n  DateCreated: '2016-07-29T18:42:35.686Z',\n  Index: '1',\n  From: 'SneakyQuincyEssex',\n  MessageSid: some_id,\n  Identity: 'SneakyQuincyEssex',\n  Body: 'yo',\n  AccountSid: some_id,\n  text: 'yo',\n  from: 'SneakyQuincyEssex',\n  to: undefined,\n  user: 'SneakyQuincyEssex',\n  channel: some_id }\n\nBecause of the nature of Twilio and the nature of channels and how they are dealt with, this makes sense. We'll look at what other differences this brings in the next section.\n\nStandardization is at the heart of Botmaster. The framework was really created for that purpose. In order to do that, the Facebook Messenger message format was chosen and adopted. This means that when your botmaster object receives an 'update' event from anywhere (twitter, telegram as of this writing), you can be sure that it will be of the same format as a similar message that would come from Messenger.\nTypically, it would look something like this for a message with an image attachment. Independant of what platform the message comes from:\n\n{\n  raw: platformspecificraw_update,\n  sender: {\n    id: idofsender\n  },\n  recipient: {\n    id: idofthe_recipent // will typically be the bot's id\n  },\n  timestamp: unixmilisecondstimestamp,\n  message: {\n    mid: message_id,\n    seq: messagesequenceid,\n    attachments: [\n      {\n        type: 'image',\n        payload: {\n          url: 'https://scontent.xx.fbcdn.net/v/.....'\n        }\n      }\n    ]\n  }\n};\n\nThis allows developers to handle these messages in on place only rather than doing it in multiple ones.\n\nThe bot object\n---\n\nConfusion may [and most likely will] arise when trying to understand how the bot objects returned with each message differ between both frameworks.\n\nBotkit has a concept of a controller. Controllers are not platform agnostic according to their definition. So for example a Twilio IPM controller will look like this:\n\nvar controller = Botkit.twilioipmbot({\n    debug: false,\n});\nThis controller could then spawn new Twilio IMP bots. Bots all have a fixed endpoint with a port that can be defined if you need multiple bots of the same type. The bot object is returned with every event and you can then do things like send a message or reply etc with it.\n\nFor messenger, it would look something like this:\n\nconst controller = Botkit.facebookbot({\n  access_token: messengerCredentials.pageToken,\n  verify_token: messengerCredentials.verifyToken,\n});\n\nNOTE: Because of the fixed endpoint and the fact that Botkit does not (according to their code as of Aug 18th 2016) verify the integrity of the requests using the Facebook App Secret, I would advise against using it as this means that anyone can make a request to https://YOURSERVERURL:PORT_CHOSEN/facebook/receive and fake requests from Facebook.\n\nOf course, you can have multiple controllers in your app. But you will have to manage the various types of incoming messages.\n\nBotmaster does not have this concept of a controller. In fact, if you are coming from Botkit, you can think of Botmaster as a sort of supercontroller from which you can create a bot of any type as in this example:\n\n// just an example to show what types of settings are expected\nconst otherMessengerSettings = {\n  credentials: {\n    verifyToken: messengerCredentials.verifyToken,\n    pageToken: messengerCredentials.pageToken, // access_token in Botkit\n    fbAppSecret: messengerCredentials.fbAppSecret,\n  },\n  webhookEndpoint: '/webhooksomerandom_string',\n}\n\nconst botsSettings = [{ telegram: telegramSettings }, // settings found elsewhere\n                      { messenger: messengerSettings }, // settings found elsewhere\n                      { messenger: otherMessengerSettings },\n                      { twitter: twitterSettings},]; // settings found elsewhere\n\nconst botmaster = new Botmaster({settings: botsSettings});\n\nBot objects are created under the hood and events received by each of them will be relayed to the Botmaster in the standardized Messenger format mentioned in the Message format part. Events are called updates and receiving them looks like this:\n\nbotmaster.on('update', (bot, update) = {\n});\n\nWhere the bot object would have been created with any of the 4 settings mentioned. Note the fact that there are 2 messenger settings. Because Botmaster requires an endpoint to be specified in the settings, nothing more than specifying it has to be done there. We recommend people to include some sort of a key in their endpoint as added security for Messenger (on top of the integrity verification from the Facebook app secret) and as basic security for Telegram.\n\nWorking with webhooks\n---\n\nIn order to receive messages, some platforms make the use of webhooks. Which means they will send requests to some endpoints on your server. In order to do that, both frameworks make the use of express() app objects under the hood. Botkit does so for Messenger, Twilio IPM and some of the Slack solutions. Botmaster does do for Messenger and Telegram (for now).\n\nThe standard way to deal with this in Botkit is the following:\n\nconst port = 3000;\n\ncontroller.setupWebserver(port, function(err, webserver) {\n  controller.createWebhookEndpoints(webserver)\n});\n\nAs you can see, this will create an express() webserver and send it onto the createWebhookEndpoints function. The server will now listen onto the facebook/receive endpoint on port 3000 if it is a Messenger controller. It will listen onto the '/twilio/receive' for Twilio IPM and '/slack/receive' for Slack (if using one of the services that uses webhooks).\n\nOf course, you might want to use your own express() app webserver to use accross multiple controllers or to serve all sorts of other purposes. You would do this like that in Botkit:\n\nconst express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n.\n.\n.\ncontroller.createWebhookEndpoints(app, bot, () = {\n    console.log('This bot is online!!!');\n});\n\napp.listen(3000, function() {\n  console.log('Server up');\n});\n\nIn Botmaster, instantiating a botmaster object, will by default just start an express server under the hood for you and make it listen onto port 3000. If you want it to listen onto another port, you can just do something like this when instantiating botmaster:\n\nconst port = 3001;\nconst botmaster = new Botmaster({ settings: botsSettings,\n                                 port: port });\n\nThe webhook endpoints will be set according to your settings. Go to webhooks in the main readme to read some more about webhooks in Botmaster.\n\nIn order to use your own express app, you would do as follows in Botmaster.\n\nconst express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n.\n.\n.\nconst botmaster = new Botmaster({settings: botsSettings,\n                                 app: app});\n\napp.listen(3000, function() {\n  console.log('Server up');\n});\n\nBy default, Botkit will use different express app webservers for each controller. Botmaster, as mentioned earlier, is a sort of supercontroller. Because of that, it uses the same express webserver accross all channels by default.\n\nSupported Platforms\n---\nThe following are platforms that are supported out of the box. Both frameworks allow developers to write their own integrations and npm packages might exist for the a platform you are interested in.\n\n|   | Botmaster| Botkit |\n|---|---|---|\n|Facebook Messenger| x | x |\n|Slack| x | x |\n|Twilio IPM| | x |\n|Twitter DM| x |  |\n|Telegram| x |  |\n|WebSockets| x | |\n|MS Bot framework|| x |\n\nConversations\n---\n\nBotkit allows developers to specify a deterministic conversation flow within the code to simplify such flows. This is definitely handy and something that can help when creating Slack and Twilio bots\n\nBecause Botmaster was initialy built mainly as a standardization agnostic layer that assumes your messages will be sent to some sort of AI service like Watson Conversation and others, this hasn't been builtin to the first version. This is however something that will come soon (in a different form from the ones in Botkit). Depending on requests however, it could come sooner or later.\n\nConclusion\n---\nI hope this all made some sort of sense to you and that you are now able to make a sensible decision with respect to which framework to use.\n\nI realize there are other frameworks out there too that I haven't mentioned. If anyone would like to look into them and tell me what the differences are, I'd be happy to add them to another file.\n",
        "tags": []
    },
    {
        "uri": "/content/other-articles/index",
        "title": "Other Articles",
        "content": "\nOTHER ARTICLES\n\n Botmaster or botkit\n",
        "tags": []
    },
    {
        "uri": "/content/tutorials/index",
        "title": "Tutorials (coming soon)",
        "content": "Coming soon\n",
        "tags": []
    },
    {
        "uri": "/content/working-with-botmaster/botmaster-basics",
        "title": "Botmaster Basics",
        "content": "\nHopefully, by now you've gathered your credentials for at least one platform and got some basic bot running. We remember from the quickstart and the various Setup guides in getting-started that we can start our botmaster server like this:\n\nconst Botmaster = require('botmaster');\n.\n. // full settings object omitted for brevity\n.\nconst botsSettings = [{ telegram: telegramSettings },\n                      { messenger: messengerSettings },\n                      { twitter: twitterSettings },\n                      { slack: slackSettings },\n                      { socketio: socketioSettings }];\n\nconst botmasterSettings = {\n  botsSettings: botsSettings,\n  // by default botmaster will start an express server that listens on port 3000\n  // you can pass in a port argument here to change this default setting:\n  port: 3001\n}\n\nconst botmaster = new Botmaster(botmasterSettings);\n\nSettings\n\nThe botmasterSettings object has the following parameters:\n\n| Parameter | Description\n|--- |---\n| botsSettings | An array of platform specific settings. See Quickstart to see an example of those and the various setup guides in Getting started to see how to get started with the various platforms.\n| port  | (optional) The port to use for your webhooks (see webhooks to understand more about webhooks). This will only be used if the app parameter is not provided. Otherwise, it will be ignored\n| app  | (optional) An express.js app object to mount the webhookEnpoints onto. If you choose to do this, it is assumed that you will be starting your own express server and this won't be done by Botmaster. Unless you also specify a server parameter, botmaster.server will be null\n| server | (optional) an http server object. It can be accessed via botmaster.server once instantiated. If passed and using socket.io. This server object will be used as the socker.io server.\n\n{{% notice info %}}\nPlease note, if you are passing in an app object to the settings, it is assumed that you are dealing with anything relating to your http server. That is start listening, closing it if necessary etc.\n{{% /notice %}}\n\n{{% notice warning %}}\nIf using socket.io (socketio), you will need to either define BOTH an app object and its corresponding server object in the settings. Or if you would rather botmaster manage this for you, you can define none of them. Alternatively, if you want, say, to have a different http server for your main botmaster app and for socket.io, you can do something like this:\n.\n.\nconst socketioSettings = {\n  id: 'SOMEIDOFYOURCHOOSING',\n  server: 'SOMEHTTPSERVEROFYOURS', // this server can't run on port 3000 in this example\n};\n\nconst botsSettings = [{ telegram: telegramSettings },\n                      { messenger: messengerSettings },\n                      { twitter: twitterSettings },\n                      { slack: slackSettings },\n                      { socketio: socketioSettings }];\n\nconst botmasterSettings = {\n  botsSettings: botsSettings,\n}\n\nconst botmaster = new Botmaster(botmasterSettings);\nIn this example, a server will be started under the hood by botmaster using your express. This http server will be a different one from the one used in\n{{% /notice %}}\n\n Events\n\nBotmaster is built on top of the EventEmitter node.js class. Which means it can emit events and most importantly for us here, it can listen onto them. By doing any of the following:\n\nbotmaster.on('server running', (message) = {\n  console.log(message);\n});\n\nbotmaster.on('update', (bot, update) = {\n  console.log(bot.type);\n  console.log(update);\n});\n\nbotmaster.on('error', (bot, err) = {\n  console.log(bot.type);\n  console.log(err.stack);\n});\n\nThese are the only four listeners that you can listen onto in botmaster. Let's go though them briefly:\n\nserver running\n\nThis event will be emitted only if you are not managing your own server (i.e. you started botmaster without setting the app parameter). It is just here to notify you that the server has been started. You don't necessarily need to use it. But you might want to do things at this point.\n\n update\n\nThis is really where all the magic happens. Whenever a message (update in Botmaster semantic) is sent into your application. Botmaster will parse it and format it into its [FB Messenger] standard. Along with it, you will get a bot object which is the underlying object into which the message was sent. Note that the updates are standardized as well as the methods to use from the bot object (i.e. sending a message). Read further down to see how those two objects work.\n\nerror\n\nThis event is thrown whenever an error internal to Botmaster occurs. I.e. if for some reason a misconfigured message was sent in. Or if some other kind of error occurred directly within Botmaster. It is good to listen onto this event and keep track of potential errors. Also, if you code an error within botmaster.on, and don't catch it, it will be caught by Botmaster and emitted in to error. So like this you have full control of what is going on and can log everything straight from there.\n\n Bot object\n\nBot objects are really the ones running the show in the Botmaster framework. Your botmaster object is simply a central point of control for you to manage all of your bots. Botmaster assumes that most of your bots will have a central bit of code that you don't want to have to replicate for every platform/bot instance. Which should make sense. To drive the point a little further, here is another [perfectly acceptable way] of starting botmaster.\n\nconst Botmaster = require('botmaster');\nconst MessengerBot = Botmaster.botTypes.MessengerBot;\n.\n.\nconst botmaster = new Botmaster();\n.\n. // full settings objects omitted for brevity\n.\nconst messengerBot = new MessengerBot(messengerSettings);\nconst slackBot = new SlackBot(slackSettings);\nconst twitterBot = new TwitterBot(twitterSettings);\nconst socketioBot = new SocketioBot(socketioSettings);\nconst telegramBot = new TelegramBot(telegramSettings);\n\nbotmaster.addBot(messengerBot);\nbotmaster.addBot(slackBot);\nbotmaster.addBot(twitterBot);\nbotmaster.addBot(socketioBot);\nbotmaster.addBot(telegramBot);\n\nAlthough the point of botmaster is for developers to do something like this after declaring the botmaster instance:\n\nbotmaster.on('update', (bot, update) = {\n  // do stuff with your bot and update here\n});\n\nOne can just as well do:\n\nmessengerBot.on('upadte', (update) = {\n  // do stuff with your messenger bot here\n});\n\n// this applies to all the bot objects that would have been declared separately.\n\nThe update object is the as the botmaster update one you would get from that bot. Of course, this code would only apply to your messengerBot instance and not the others.\n\nAs seen, bot instances can be accessed directly within an update event. Because you might want to act differently on bots of a certain type or log information differently based on type, every bot comes with a bot.type parameter that is one of: messenger, slack, twitter, socketio, telegram or whatever third-party bot class you might have installed or created.\n\nIt is important to note here, that you can have multiple bot objects for a certain type. I'm sure you can find reasons for why you would want to do this. This is important to mention, as you might have, say, 2 bots of type messenger dealt with via Botmaster. You might want to do platform specific code by doing the following:\n\nbotmaster.on('update', (bot, update) = {\n  if (bot.type === 'messenger' {\n    // do messenger specific stuff\n    return;\n  })\n})\n\nThen you might want to do bot object specific code. You would do this as such:\n\nbotmaster.on('update', (bot, update) = {\n  if (bot.type === 'messenger' {\n    // do messenger specific stuff\n    if (bot.id === 'YOURBOTID') {// this will be the user id of bot for messenger\n      // do bot object specific stuff\n      return;\n    }\n  })\n})\n\n{{% notice warning %}}\nBotmaster does not assure you that the id parameter of the bot object will exist upon instantiation. the id is only assured to be there once an update has been received by the bot. This is because some ids aren't known until botmaster knows 'who' [your bot] the message was sent to.\n{{% /notice %}}\n\nOr if you declared your bots and botmaster as in the beginning of this section, you might have done the following:\n\nconst Botmaster = require('botmaster');\nconst botmaster = new Botmaster();\n.\n. // full settings objects omitted for brevity\n.\nconst messengerBot1 = new MessengerBot(messengerSettings1);\nconst messengerBot2 = new MessengerBot(messengerSettings2);\nconst slackBot = new SlackBot(slackSettings);\nconst twitterBot = new TwitterBot(twitterSettings);\n\nbotmaster.addBot(messengerBot);\nbotmaster.addBot(slackBot);\nbotmaster.addBot(twitterBot);\n\nbotmaster.on('update', (bot, update) = {\n  if (bot.type === 'messenger' {\n    // do messenger bot specific stuff\n\n    if (bot === messengerBot1) { // without using ids\n      // do messengerBot1 specific stuff\n    }\n    return;\n  })\n})\n\nIf you want to perform bot object specific code, I recommend declaring your objects in this way rather than the standard way. If you want to perform platform specific way, the standard way is perfectly fine.\n\nI'll note quickly that each bot object created comes from one of the various bot classes as seen above. They act in the same way on the surface (because of heavy standardization), but have a few idiosynchrasies here and there. You can read about them all in their own sections.\n\nAlso useful to note is that you can access all the bots added to botmaster by doing botmaster.bots. you can also use botmastet.getBot or botmaster.getBots to get a specific bot (using type or id);\n\nIt is important to note the addBot syntax as you can create your own Bot class that extends the Botmaster.botTypes.BaseBot class. For instance, you might want to create your own class that supports your pre-existing messaging standards. Have a look at the working with a botmaster supported bot class  documentation to learn how to do this.\n\nMessage/Update format\n\nStandardization is at the heart of Botmaster. The framework was really created for that purpose. This means that messages coming from any platform have to have the same format.\n\nIn order to do that, the Facebook Messenger message format was chosen and adopted. This means that when your botmaster object receives an 'update' event from anywhere, you can be sure that it will be of the same format as a similar message that would come from Facebook Messenger.\n\n Incoming update\n\nTypically, it would look something like this for a message with an image attachment. Independent of what platform the message comes from:\n\n{\n  raw: platformspecificraw_update,\n  sender: {\n    id: idofsender\n  },\n  recipient: {\n    id: idofthe_recipent // will typically be the bot's id\n  },\n  timestamp: unixmilisecondstimestamp,\n  message: {\n    mid: message_id,\n    seq: messagesequenceid,\n    attachments: [\n      {\n        type: 'image',\n        payload: {\n          url: 'https://scontent.xx.fbcdn.net/v/.....'\n        }\n      }\n    ]\n  }\n};\n\nThis allows developers to handle these messages in one place only rather than doing it in multiple places. For more info on the various incoming messages formats, read the messenger bot doc on webhooks at: https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-received.\n\nCurrently, you will only get updates for Messages (and not delivery, echo notification etc) for all platforms. On Messenger, it is assumed that you don't want to get updates for delivery, read and echo. This can't be turned on at the moment, but will be in later versions as it might be a requirement.\n\nNote on attachment types and conversions\nAttachment type conversion on incoming updates works as such for Twitter:\n\n| Twitter Type | Botmaster conversion\n|--- |---\n| photo | image\n| video  | video\n| gif  | video\n\n!!!Yes gif becomes a video. because Twitter doesn't actually use gifs the way you would expect it to. It simply loops over a short .mp4 video.\n\nAlso, here's an important caveat for Twitter bot developers who are receiving attachments. Image links that come in from the Twitter API will be private and not public, which makes using them quite tricky. You might need to make authenticated requests to do so. The twitterBot objects you will receive in the update will have a bot.twit object. Documentation for how to use this is available here.\n\nReceiving and sending attachments [the Botmaster way] is not yet supported on Slack as of version 2.2.1. However, Slack supports url unfurling (meaning if you send images and other types of media this will be shown in the messages and users won't just see a url). Also, because of how Botmaster is built (don't throw any of the original information from the message away) you can find all the necessary information in the update.raw object of the update.\n\nAttachment type conversion works as such for Telegram:\n\n| Telegram Type | Botmaster conversion\n|--- |---\n| audio | audio\n| voice  | audio\n| photo  | image\n| video  | video\n| location  | location\n| venue  | location\n\ncontact attachment types aren't supported in Messenger. So in order to deal with them in Botmaster, you will have to look into your update.raw object which is the standard Telegram update. You will find your contact object in update.raw.contact.\n\nAlso, concerning location and venue attachments. The url received in Botmaster for Telegram is a google maps one with the coordinates as query parameters. It looks something like this: https://maps.google.com/?q=lat,long\n\nA few of you will want to use attachments with your socket.io bots. Because the Botmaster message standard is the Facebook Messenger one, everything is URL based. Which means it is left to the developer to store both incoming and outgoing attachments. A tutorial on how to deal with this will be up soon in the Tutorials section.\n\n Outgoing messages\n\nAgain, outgoing messages are expected to be formatted like messages the Messenger platform would expect. They will typically look something like this for a text message:\n\nconst message = {\n  recipient: {\n    id: update.sender.id,\n  },\n  message: {\n    text: 'Some arbitrary text of yours'\n  },\n}\n\nand you would use this as such in code:\n\nbotmaster.on('update', (bot, update) = {\n  const message = {\n    recipient: {\n      id: update.sender.id,\n    },\n    message: {\n      text: 'Some arbitrary text of yours'\n    },\n  };\n  bot.sendMessage(message);\n});\n\nAs you can see, the sendMessage method used is used directly from the bot object and not using the botmaster one.\n\nBecause you might not always want to code in a complex json object just to send in a simple text message or photo attachment, Botmaster comes with a few helper methods that can be used to send messages with less code:\n\nbot.sendMessageTo\n\n| Argument | Description\n|--- |---\n| message | an object without the recipient part. In the previous example, it would be message.message.\n| recipientId  | a string representing the id of the user to whom you want to send the message.\n\nbot.sendTextMessageTo\n\n| Argument | Description\n|--- |---\n| text | just a string with the text you want to send to your user\n| recipientId  | a string representing the id of the user to whom you want to send the message.\n\nTypically used like so to send a text message to the user who just spoke to the bot:\n\nbotmaster.on('update', (bot, update) = {\n  bot.sendTextMessageTo('something super important', update.sender.id);\n});\n\nbot.reply\n\n| Argument | Description\n|--- |---\n| update | an update object with a valid update.sender.id.\n| text  | just a string with the text you want to send to your user\n\nThis is is typically used like so:\n\nbotmaster.on('update', (bot, update) = {\n  bot.reply(update, 'something super important!');\n});\n\nAttachments\n\nbot.sendAttachmentTo\n\nWe'll note here really quickly that Messenger only takes in urls for file attachment (image, video, audio, file). Most other platforms don't support sending attachments in this way. So we fall back to sending the url in text which really results in a very similar output. Same goes for Twitter that doesn't support attachments at all.\n\n| Argument | Description\n|--- |---\n| attachment | a valid Messenger style attachment. See here for more on that.\n| recipientId  | a string representing the id of the user to whom you want to send the message.\n\nThis is the general attachment sending method that will always work for Messenger but not necessarily for other platforms as Facebook Messenger supports all sorts of attachments that other platforms don't necessarily support. So beware when using it. To assure your attachment will be sent to all platforms, use bot.sendAttachmentFromURLTo.\n\nThis is typically used as such for sending an image url.\n\nbotmaster.on('update', (bot, update) = {\n  const attachment = {\n    type: 'image'\n    payload: {\n      url: \"some image url you've got\",\n    },\n  };\n  bot.sendAttachment(attachment, update.sender.id);\n});\n\nbot.sendAttachmentFromURLTo\n\nJust easier to use this to send standard url attachments. And URL attachments if used properly should work on all out-of-the-box platforms:\n\n| Argument | Description\n|--- |---\n| type | string representing the type of attachment (audio, video, image or file)\n| url  | the url to your file\n| recipientId  | a string representing the id of the user to whom you want to send the message.\n\nThis is typically used as such for sending an image url.\n\nbotmaster.on('update', (bot, update) = {\n  bot.sendAttachment('image', \"some image url you've got\", update.sender.id);\n});\n\n Status\n\nbot.sendIsTypingMessageTo\n\nTo indicate that something is happening on your bots end, you can show your users that the bot is 'working' or 'typing' something. to do so, simply invoke sendIsTypingMessageTo.\n\n| Argument | Description\n|--- |---\n| recipientId  | a string representing the id of the user to whom you want to send the message.\n\nIt is used as such:\n\nbotmaster.on('update', (bot, update) = {\n    bot.sendIsTypingMessageTo(update.sender.id);\n});\n\nIt will only send a request to the platforms that support it. If unsupported, nothing will happen.\n\nButtons\n\nButtons will almost surely be part of your bot. Botmaster provides a method that will send what is assumed to be a decent way to display buttons throughout all platforms.\n\nbot.sendDefaultButtonMessageTo\n\n| Argument | Description\n|--- |---\n| buttonTitles | array of button titles (no longer than 10 in size).\n| recipientId  | a string representing the id of the user to whom you want to send the message.\n| textOrAttachment  | (optional) a string or an attachment object similar to the ones required in bot.sendAttachmentTo. This is meant to provide context to the buttons. I.e. why are there buttons here. A piece of text or an attachment could detail that. If not provided,  text will be added that reads: 'Please select one of:'.\n\nThe function defaults to sending quick_replies in Messenger, setting Keyboard buttons in Telegram, buttons in Slack and simply prints button titles one on each line in Twitter as it doesn't support buttons. The user is expecting to type in their choice in Twitter. In the socketio implementation, the front-end/app developer is expected to write the code that would display the buttons on their front-end.\n\n Using Botmaster with your own express() app\n\nHere's an example on how to do so:\n\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\nconst Botmaster = require('botmaster');\n\nconst telegramSettings = {\n  credentials: {\n    authToken: process.env.TELEGRAMTESTTOKEN,\n  },\n  webhookEndpoint: '/webhook1234/',\n};\n\nconst messengerSettings = {\n  credentials: {\n    verifyToken: process.env.MESSENGERVERIFYTOKEN,\n    pageToken: process.env.MESSENGERPAGETOKEN,\n    fbAppSecret: process.env.FACEBOOKAPPSECRET,\n  },\n  webhookEndpoint: '/webhook1234/',\n};\n\nconst botsSettings = [{ telegram: telegramSettings },\n                      { messenger: messengerSettings }];\n\nconst botmasterSettings = {\n  botsSettings: botsSettings,\n  app: app,\n}\n\nconst botmaster = new Botmaster(botmasterSettings);\n\nbotmaster.on('update', (bot, update) = {\n  bot.sendMessage({\n    recipient: {\n      id: update.sender.id,\n    },\n    message: {\n      text: 'Well right back at you!',\n    },\n  });\n});\n\nconsole.log(Loading App);\n// start server on the specified port and binding host\napp.listen(port, '0.0.0.0', () = {\n  // print a message when the server starts listening\n  console.log(Running App on port: ${port});\n});\n",
        "tags": []
    },
    {
        "uri": "/content/working-with-botmaster/index",
        "title": "Working with Botmaster",
        "content": "\nWorking with Botmaster\n",
        "tags": []
    },
    {
        "uri": "/content/working-with-botmaster/writing-your-own-bot-class",
        "title": "Writing your Own Bot Class",
        "content": "\nBot classes\n\nThe following assumes that you have read the main documentation in \"getting started\" and in \"botmaster basics\". A general understand of how Botmaster and more generally how chatbots work is also assumed.\n\nBecause of that, we will pick up right from there and start looking into the bot classes Botmaster comes bundled with.\n\nBotmaster makes five usable bot classes available to developers out of the box. MessengerBot, SlackBot, SocketioBot, TelegramBot and TwitterBot.\n\nFor example, you can instantiate a new MessengerBot object as such:\n\nconst Botmaster = require('botmaster');\nconst MessengerBot = Botmaster.botTypes.MessengerBot;\n\nconst messengerSettings = {\n  credentials: {\n    verifyToken: 'YOUR verifyToken',\n    pageToken: 'YOUR pageToken',\n    fbAppSecret: 'YOUR fbAppSecret'\n  },\n  webhookEndpoint: '/webhook1234',\n};\n\nconst messengerBot = new MessengerBot(messengerSettings);\n\nIn order to get updates from Messenger, you would then be expected to mount your bot's express mini-app messengerBot.app onto your own express app by doing something like this:\n\nconst app = require('express')();\napp.use('/', messengerBot.app);\napp.listen(3000, function() {});\n\nThis will mount your bot onto: https://YourDomainName/webhook1234. Note how the bot type is not part of the URL here.\n\n Making Botmaster objects and bot objects work together\n\nIn the botmaster basics sectio nwe saw how botmaster objects return a bot object along with every update it receives. I.e. something like this happens:\n\nbotmaster.on('update', (bot, update) = {\n  console.log(bot.type);\n  console.log(update);\n});\n\nWe also saw in the last section how to setup a bot using its own bot class. Let's have a look at how to use this bot inside of a botmaster object.\n\nAs usual, we create a botmaster object. This one supports Twitter and Telegram, but not Messenger. We create it as such:\n\nconst Botmaster = require('botmaster');\n\nconst twitterSettings = {\n    consumerKey: 'YOUR consumerKey',\n    consumerSecret: 'YOUR consumerSecret',\n    accessToken: 'YOUR accessToken',\n    accessTokenSecret: 'YOUR accessTokenSecret',\n  }\n}\n\nconst telegramSettings = {\n  credentials: {\n    authToken: 'YOUR authToken',\n  },\n  webhookEndpoint: '/webhook1234/',\n};\n\nconst botsSettings = [{ twitter: twitterSettings },\n                      { telegram: telegramSettings }];\n\nconst botmasterSettings = { botsSettings: botsSettings };\n\nconst botmaster = new Botmaster(botmasterSettings);\n\nIn this example the botmaster object will start a new express() app server running locally on port 3000 as expected by default (see here to see how to change that). However, we later might want to add to botmaster the object we created in the first section, namely, messengerBot.\n\nWe can achieve this by doing the following:\n\nbotmaster.addBot(messengerBot);\n\nThis will mount your bot onto: https://YourDomainName/messenger/webhook1234. Note how the bot type is part of the endpoint here. This is because the Botmaster class assumes that you want your endpoint to be mounted onto its botType.\n\nYou will then get updates from the botmaster object as if you had instantiated it with the messenger settings too.\n\nWhat this means is that any bot class that follows a  certain set of rules will be able to be added to a botmaster object.\n\nCreating your own bot classes\n\nBefore defining the rules that have to be respected in order to write a Botmaster compatible bot class let's look at the constructor of one of the existing one, TelegramBot:\n\n #constructor(settings)\n\nclass TelegramBot extends BaseBot {\n\n  constructor(settings) {\n    super(settings);\n    this.type = 'telegram';\n    this.requiresWebhook = true;\n    this.requiredCredentials = ['authToken'];\n\n    this.__applySettings(settings);\n    .\n    .\n    .\n    this.__createMountPoints();\n  }\n\n }\n\nLet's look into this line by line. The first line reads super(settings). Which of course just means it calls the constructor of TelegramBot's superclass, namely, BaseBot. BaseBot's constructor doesn't actually do anything fancy a part from calling its own superclass's constructor and setting a few default values [as pointers for you, the developer]. BaseBot calls its own superclass's constructor as it inherits from node.js's EventEmitter which will allow your bot's classes to listen to events as well as emit them.\n\nThe following three lines setup some important values.\n\n  this.type: the type of bot that is being instantiated. It's important to specify that as developers might want to condition some code on the type of bot you are writing.\n  this.requiresWebhook: whether the bot requires webhooks. If the platform you are coding for requires webhooks, you will be expected to set a this.app variable at some point in the setup. We'll look into this when we have a look at what the this.__createMountPoints(); does.\n  this.requiredCredentials: sets up an array of credentials that are expected to be defined for the platform you are coding your class for. Telegram only takes in 1, so we just have an array with the value 'authToken'.\n\n__applySettings(settings)\n\nThe next line calls the this.__applySettings(settings) function. This function is implemented in BaseBot and will just make sure that the settings passed on to the bot constructor are valid with respect to the parameters you defined. You should always call this function directly after setting the three [or more or less depending on your bot] parameters specific to the platform you are coding for. If valid, the settings will then be applied to the bot object. e.g. this.webhookEndpoint will be set to settings.webhookEndpoint.\n\n__createMountPoints()\n\nThe last line of our controller makes a call to this.__createMountPoints();. This line should only be present if your bot class requires webhooks. If this is the case, you will be expected to define a class member function that looks like:\n\n  __createMountPoints() {\n    this.app = express();\n    // for parsing application/json\n    this.app.use(bodyParser.json());\n    // for parsing application/x-www-form-urlencoded\n    this.app.use(bodyParser.urlencoded({ extended: true }));\n\n    this.app.post(this.webhookEndpoint, (req, res) = {\n      this.__formatUpdate(req.body)\n\n      .then((update) = {\n        this.__emitUpdate(update);\n      }, (err) = {\n        err.message = Error in __formatUpdate \"${err.message}\". Please report this.;\n        this.emit('error', err);\n      });\n\n      // just letting telegram know we got the update\n      res.sendStatus(200);\n    });\n  }\n\nVery importantly, this function creates an express router this.app that will be mounted onto the main app router from the botmaster object if botmaster.addBot is used.\n\nIt then sets up the post endpoint that listens onto this.webhookEnpoint. No further assumption is made here.\n\nPlease note that you might have another function that needs to be called at this point. For instance, in the socketioBot class, I make a call to: this.__setupSocketioServer(); and that function looks like this:\n\n__setupSocketioServer() {\n  this.ioServer = io(this.server);\n\n  this.ioServer.on('connection', (socket) = {\n    socket.join(SocketioBot.__getBotmasteruserId(socket));\n\n    socket.on('message', (message) = {\n      // just broadcast the message to other connected clients with same user id\n      const botmasterUserId = SocketioBot.__getBotmasteruserId(socket);\n      socket.broadcast.to(botmasterUserId).emit('own message', message);\n      // console.log(JSON.stringify(socket.rooms, null, 2));\n      const rawUpdate = message;\n      try {\n        rawUpdate.socket = socket;\n      } catch (err) {\n        err.message = ERROR: \"Expected JSON object but got '${typeof message}' ${message} instead\";\n        return this.emit('error', err);\n      }\n      const update = this.__formatUpdate(rawUpdate, botmasterUserId);\n      return this.__emitUpdate(update);\n    });\n  });\n}\n\nI won't explain what is going on here as it's not necessary for building your own Bot class.\n\n__setBotIdIfNotSet(update)\n\nIn order to help you identify between bots of different types, you will want each bot instance to have a this.id value. This will often be the same as update.recipient.id when getting updates. But not always (for instance with socket.io bots). If these aren't set upon instantiation as with Facebook Messenger bots, you can write a function like this that gets called upon receiving a message.\n\nThe following is a good default implementation used in many of botmaster's internal bot types:\n\n__setBotIdIfNotSet(update) {\n  if (!this.id) {\n  \tthis.id = update.recipient.id;\n  }\n}\n\n__formatUpdate(rawUpdate)\n\nAlthough you can technically handle the body of the request as you wish. In our createMountPoints example here (from TelegramBot code), we make a call to the formatUpdate function with the body of the request.\nIt would make sense for you to do so for consistency and because it has to be defined if you want your bot class to eventually be referenced in the Botmaster project.\n\nThis function is expected to transform the rawUpdate into an object which is of the format of Messenger updates, while having an update.raw bit that references that rawUpdate received.\n\nTypically, it would look something like this for a message with an image attachment. Independent of what platform the message comes from:\n\n{\n  raw: platformspecificraw_update,\n  sender: {\n    id: idofsender\n  },\n  recipient: {\n    id: idofthe_recipent // will typically be the bot's id\n  },\n  timestamp: unixmilisecondstimestamp,\n  message: {\n    mid: message_id,\n    seq: messagesequenceid,\n    attachments: [\n      {\n        type: 'image',\n        payload: {\n          url: 'https://scontent.xx.fbcdn.net/v/.....'\n        }\n      }\n    ]\n  }\n};\n\nYour function should return the update object(or a promise that resolves a formatted update object) in order to then call __emitUpdate with it as a parameter.\n\n__emitUpdate(update)\n\nLike __applySettings, this method is implemented in BaseBot. It handles errors, calling the incoming middleware stack, and most importantly, actually calling this.emit(update) to emit the actual update. You can overwrite this method if you wish, but in its current state, it handles the most important cases you will want to deal with. You will however need to call it with your formatted update object as a parameter in order to actually get the update object in a bot.on('update', callback) block.\n\n__sendMessage(message)\n\nAll previous methods had either something to do with object instantiation or with incoming messages. We'll now have a look at what needs to be done within your bot class to send messages.\n\nThe __sendMessage method needs to be implemented. The method should take in a Messenger style message and send a formatted message to the bot platform. It should return a Promise that resolves to something like this:\n\n  {\n   raw: rawBody,\n   recipientid: idof_user,\n   messageid: messageidofwhatwasjust_sent\n  }\n \n It is important that this be a promise and not a callback. Although developers using Botmaster can use sendMessage type methods with callbacks. The internals of Botmaster use Promises and therefore, so should your bot class.\n\nPlease note that the BaseBot superclass defines a set of methods that allow developers to more easily send messages to all platforms without having to build the whole Messenger compatible object themselves. These methods are the following:\n\nsendMessage\nsendMessageTo\nsendTextMessageTo\nreply\nsendAttachmentTo\nsendAttachmentFromURLTo\nsendDefaultButtonMessageTo\nsendIsTypingMessageTo\n\nAll these methods will convert a developer specified input into a Facebook Messenger compatible message that will be called as a parameter to sendMessage. That is, they all eventually will call your sendMessage method. You can however overwrite them if need be.\n\n__formatOutgoingMessage(message)\n\nYour sendMessage method is expected to call a __formatOutgoingMessage(message) method that will format the Messenger style message into one that is compatible with the platform you are coding your bot class for.\n\nYou can have a look at the ones defined in the TelegramBot and the TwitterBot classes for inspiration.\n\nIs this really all there is to it?\n\nYes it is! These few basic steps are the steps that should be followed in order to build your own bot classes. Nothing more is required. Of course, formatting the incoming updates and the outgoing messages won't always be as trivial as we'd wish, but this guide should help you into doing this.\n",
        "tags": []
    }
]